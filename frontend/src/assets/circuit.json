{
  "noir_version": "1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a",
  "hash": 8629381429101850839,
  "abi": {
    "parameters": [
      {
        "name": "issuer",
        "type": { "kind": "field" },
        "visibility": "private"
      },
      {
        "name": "issued_at",
        "type": { "kind": "integer", "sign": "unsigned", "width": 64 },
        "visibility": "private"
      },
      {
        "name": "valid_until",
        "type": { "kind": "integer", "sign": "unsigned", "width": 64 },
        "visibility": "private"
      },
      {
        "name": "is_valid",
        "type": { "kind": "boolean" },
        "visibility": "private"
      },
      {
        "name": "year_of_birth",
        "type": { "kind": "integer", "sign": "unsigned", "width": 16 },
        "visibility": "private"
      },
      {
        "name": "secret",
        "type": { "kind": "field" },
        "visibility": "private"
      },
      { "name": "hash", "type": { "kind": "field" }, "visibility": "public" },
      {
        "name": "min_age_feature",
        "type": { "kind": "integer", "sign": "unsigned", "width": 16 },
        "visibility": "public"
      },
      {
        "name": "access_nullifier",
        "type": { "kind": "field" },
        "visibility": "public"
      },
      {
        "name": "now",
        "type": { "kind": "integer", "sign": "unsigned", "width": 64 },
        "visibility": "public"
      },
      { "name": "owner", "type": { "kind": "field" }, "visibility": "public" },
      {
        "name": "current_year",
        "type": { "kind": "integer", "sign": "unsigned", "width": 16 },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "956286968014291186": { "error_kind": "custom", "kind": "field" },
      "1858571428594059766": {
        "error_kind": "string",
        "string": "nullifier not correct"
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "11320418456059072847": {
        "error_kind": "string",
        "string": "user can not access this"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VXzU4CMRDusqsCywICyr969GLS7g/s3kiM4Wh8BIlL4ot49ODV+A4+gmevXvUVPHgwXkRbaZOhrCTCrAmTDDN0tpOZr+10apApHXBuSN3gbEopeKCNZRLGLM5lbWwrYSyXMNeW30EypBxI6dGe78d9N2YeO6duNAoD6gejXshCFoTBhRt6Xhz6YT8aRX0aMd+L2TiIvDGdUgH4on+jnj4gYqvInGGsE4DZBGCl9ILU1TyHc5FzSeZvaRiYGgZ0NWImoi8HcW228eKiaeKXR/RVRMSvsib4WYi+Soj4VRHxS6oNYn+rGlABehXoZTJbG2qcdzjvcq6T+dpgIK+NiYgnjDOjxbmq703EnGvkf87NqjljnhsbMa4GwT03qh9okNn7MEPmCXtfbSFijIQLEz8JqaP5hrg2pWwRMtuctch8c2atCfjLxhWPxyI01kTMsZXSpsBulJuIa5FmnG2STvHGjrOzfJyuPpDUXIgLUTURG0BvA71DZpuLLuc9zvtk+vDTmwu9uNLViGUR8ewS3EtH5b6p7QGBgSntG8AupKhXIifxmBWPAhvMhVg6Ur49PA1fL08cg8wTdiOH3dSUpK/jz+fh/c3VIYy9KuXp2dH1rd+6g7a6lO+5/NfLx2NTzzcrZU7KPLAjPlRd5d9Ox//P3aVTHui2ZlNny0qYZ/zyP6PJRd8u2mNOgk35VGsJ41V5fAN2NXB6JRIAAA==",
  "debug_symbols": "7ZfbioQwDIbfpddeNGlt4rzKMgweB0FUPCwsMu++OlgR1x1hxItdvDPNn/zhk7a0E1EctPdbmidFLS4fnciK0G/SIu+jTpjnUl36+RDVjV814oKKwRFxHvWfGs3DEUmaxeJi4OH8EAOgFQOoDbFBM2oN6ddS5eIo1TDryitSRPbsvEriazEoacWgkDfEEu0UII07F18dQSe89+Hxv4BHYNsiKbnBg0jZecnDPfC8E9778ECe9HbQg5PeDnq4nx5KsgaIci4eDNSqgevZGjTAyxq9WkOAEyKzNZQibYfSkpYG7tEGZr+BhuknawVLAzragI82WL8ziKbbn9hd1OD6ScmabQ0zbgxl9LTXDXt/fgMjnEiWSPBEskSyfgoz/obk2gdBlWZZer/NH2j98qdfpX6QxWOYtHk4yzZfpc3Y+rIqwjhqq3jo9Mz17b8B",
  "file_map": {
    "61": {
      "source": "use dep::poseidon::poseidon2;\n\nstruct Certificate {\n    issuer: Field,\n    issued_at: u64,\n    valid_until: u64,\n    is_valid: bool,\n    owner: Field,\n    year_of_birth: u16,\n}\n\n// Convert certificate to Field array for Poseidon2 hashing\nfn cert_to_fields(cert: Certificate) -> [Field; 6] {\n    [\n        cert.issuer,\n        cert.issued_at as Field,\n        cert.valid_until as Field,\n        if cert.is_valid { 1 } else { 0 } as Field,\n        cert.owner,\n        cert.year_of_birth as Field,\n    ]\n}\n\n// Hash certificate using Poseidon2\nfn cert_hash(cert: Certificate) -> Field {\n    let fields = cert_to_fields(cert);\n    poseidon2::Poseidon2::hash(fields, fields.len())\n}\n\n// Create certificate\nfn user_certificate(\n    issuer: Field,\n    issued_at: u64,\n    valid_until: u64,\n    is_valid: bool,\n    owner: Field,\n    year_of_birth: u16,\n) -> Certificate {\n    Certificate { issuer, issued_at, valid_until, is_valid, owner, year_of_birth }\n}\n\n// Verify certificate signature and freshness using Poseidon2 hash\nfn prove_cert_signed_and_fresh(cert: Certificate, _now: u64, owner: Field) -> bool {\n    let _msg_hash = cert_hash(cert);\n\n    // Verify ownership\n    assert(cert.owner == owner);\n    assert(cert.is_valid);\n\n    true\n}\n\n// Check age requirement for feature\nfn check_age_feature(cert: Certificate, feature_age: u16, current_year: u16) -> bool {\n    let age = current_year - cert.year_of_birth;\n    age >= feature_age\n}\n\n// Generate access nullifier using Poseidon2\nfn gen_access_nullifier(cert: Certificate, secret: Field) -> Field {\n    let cert_hash_field = cert_hash(cert);\n\n    let inputs = [cert_hash_field, secret];\n    poseidon2::Poseidon2::hash(inputs, inputs.len())\n}\n\n// Poseidon2 hash of certificate for public verification\nfn cert_poseidon_hash(cert: Certificate) -> Field {\n    cert_hash(cert)\n}\n\nfn main(\n    // Private witnesses\n    issuer: Field,\n    issued_at: u64,\n    valid_until: u64,\n    is_valid: bool,\n    year_of_birth: u16,\n    secret: Field,\n    // Public inputs\n    hash: pub Field,\n    min_age_feature: pub u16,\n    access_nullifier: pub Field,\n    now: pub u64,\n    owner: pub Field,\n    current_year: pub u16,\n) {\n    let cert = user_certificate(\n        issuer,\n        issued_at,\n        valid_until,\n        is_valid,\n        owner,\n        year_of_birth,\n    );\n\n    // Verify certificate freshness and ownership\n    let proof_ok = prove_cert_signed_and_fresh(cert, now, owner);\n    assert(proof_ok, \"certificate invalid\");\n\n    // Verify certificate Poseidon2 hash matches public input\n    let computed_hash = cert_poseidon_hash(cert);\n    assert(computed_hash == hash, computed_hash);\n\n    // // Example: check age for a feature requiring 18+\n\n    let age_ok = check_age_feature(cert, min_age_feature, current_year);\n    assert(age_ok, \"user can not access this\");\n\n    assert(access_nullifier == gen_access_nullifier(cert, secret), \"nullifier not correct\");\n}\n",
      "path": "/Users/dave/Work/zkbadge-starknet/circuit/src/main.nr"
    },
    "68": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "/Users/dave/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"
    }
  },
  "names": ["main"],
  "brillig_names": ["directive_integer_quotient"]
}
