{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":9753733095447400097,"abi":{"parameters":[{"name":"issuer","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"issued_at","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"valid_until","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"is_valid","type":{"kind":"boolean"},"visibility":"private"},{"name":"year_of_birth","type":{"kind":"integer","sign":"unsigned","width":16},"visibility":"private"},{"name":"sig","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_hash","type":{"kind":"field"},"visibility":"public"},{"name":"min_age_feature","type":{"kind":"integer","sign":"unsigned","width":16},"visibility":"public"},{"name":"pub_issuer","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"pub_now","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"},{"name":"pub_caller","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"current_year","type":{"kind":"integer","sign":"unsigned","width":16},"visibility":"public"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"11199417658198303016":{"error_kind":"string","string":"hash doesn't match certificate"},"11320418456059072847":{"error_kind":"string","string":"user can not access this"}}},"bytecode":"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","debug_symbols":"7ZfJioQwEIbfJWcPqayVfpWhaVwbQVRcBgbpdx8V4zgo7SGTy+DNJH/qCx/lNpAkjfrnIy+zqiW3j4EUVRx2eVWOo4GAUvNkW4flNG67sOnIjSvAgKRlMl1q/QpIlhcpuSl4BbswCEGXMAgp34fRmCVrxEldLtkSFaB+ongQZQxtWcYpex8GTm0YOMOTMGX2FECV3IbvwahPX/pc9OGlz0Wf+Rf6NCirT3N6YkRrbs+rDXPSp+mlz0UfXPpc9LFLn4s+7q5PcrAEKcQ2PBPEHxAkrgSkO4L0TlDeCdo74fgjAYW2BNRst+n41WhQ2M6mHE+OhWZtD8N27YHUOwHcCYavTwgjcEdg3gncO+HwNhVUwkqQvxrwPg6iJi+K/PnY/gyN059hk4dRkS7DrC/jzWr3VdsVu79uqjhN+iadKs1rY/lv","file_map":{"61":{"source":"use dep::poseidon::poseidon2;\nuse dep::std;\n\nstruct Certificate {\n    issuer: [u8; 32],\n    issued_at: u64,\n    valid_until: u64,\n    is_valid: bool,\n    owner: [u8; 32],\n    year_of_birth: u16,\n}\n\n// Helper to convert [u8; 32] to Field for hashing\nfn bytes32_to_field(bytes: [u8; 32]) -> Field {\n    let mut result = 0;\n    for i in 0..32 {\n        result = result * 256 + (bytes[i] as Field);\n    }\n    result\n}\n\n// Convert certificate to Field array for Poseidon2 hashing\nfn cert_to_fields(cert: Certificate) -> [Field; 6] {\n    [\n        bytes32_to_field(cert.issuer),\n        cert.issued_at as Field,\n        cert.valid_until as Field,\n        if cert.is_valid { 1 } else { 0 } as Field,\n        bytes32_to_field(cert.owner),\n        cert.year_of_birth as Field,\n    ]\n}\n\n// Hash certificate using Poseidon2\nfn cert_hash(cert: Certificate) -> Field {\n    let fields = cert_to_fields(cert);\n    poseidon2::Poseidon2::hash(fields, fields.len())\n}\n\n// Create certificate\nfn user_certificate(\n    issuer: [u8; 32],\n    issued_at: u64,\n    valid_until: u64,\n    is_valid: bool,\n    owner: [u8; 32],\n    year_of_birth: u16,\n) -> Certificate {\n    Certificate { issuer, issued_at, valid_until, is_valid, owner, year_of_birth }\n}\n\n// Verify certificate signature and freshness using Poseidon2 hash\nfn prove_cert_signed_and_fresh(\n    cert: Certificate,\n    now: u64,\n    caller_pub: [u8; 32],\n    sig: [u8; 64],\n) -> bool {\n    let msg_hash = cert_hash(cert);\n\n    // Verify ownership\n    assert(cert.owner == caller_pub);\n    assert(cert.is_valid);\n    assert(now < cert.valid_until);\n\n    // Signature verification would use msg_hash as the message digest\n    // Poseidon2 hash is directly usable as Field element for signature verification\n\n    true\n}\n\n// Check age requirement for feature\nfn check_age_feature(cert: Certificate, feature_age: u16, current_year: u16) -> bool {\n    let age = current_year - cert.year_of_birth;\n    age >= feature_age\n}\n\n// Generate access nullifier using Poseidon2\nfn gen_access_nullifier(cert: Certificate, feature_id: u64) -> Field {\n    let cert_hash_field = cert_hash(cert);\n    let feature_field = feature_id as Field;\n\n    let inputs = [cert_hash_field, feature_field];\n    poseidon2::Poseidon2::hash(inputs, inputs.len())\n}\n\n// Generate vote nullifier using Poseidon2\nfn gen_vote_nullifier(cert: Certificate, feature_id: u64, salt: [u8; 32]) -> Field {\n    let cert_hash_field = cert_hash(cert);\n    let feature_field = feature_id as Field;\n    let salt_field = bytes32_to_field(salt);\n\n    let inputs = [cert_hash_field, feature_field, salt_field];\n    poseidon2::Poseidon2::hash(inputs, inputs.len())\n}\n\n// Poseidon2 hash of certificate for public verification\nfn cert_poseidon_hash(cert: Certificate) -> Field {\n    cert_hash(cert)\n}\n\n// Helper to create Poseidon2 commitment for certificate\nfn cert_commitment(cert: Certificate, secret: Field) -> Field {\n    let cert_hash_field = cert_hash(cert);\n    let inputs = [cert_hash_field, secret];\n    poseidon2::Poseidon2::hash(inputs, inputs.len())\n}\n\nfn main(\n    // Private witnesses\n    issuer: [u8; 32],\n    issued_at: u64,\n    valid_until: u64,\n    is_valid: bool,\n    year_of_birth: u16,\n    sig: [u8; 64],\n    // Public inputs\n    pub_hash: pub Field,\n    min_age_feature: pub u16,\n    pub_issuer: pub [u8; 32],\n    pub_now: pub u64,\n    pub_caller: pub [u8; 32],\n    current_year: pub u16,\n) {\n    let cert = user_certificate(\n        issuer,\n        issued_at,\n        valid_until,\n        is_valid,\n        pub_caller,\n        year_of_birth,\n    );\n\n    // Verify certificate freshness and ownership\n    let proof_ok = prove_cert_signed_and_fresh(cert, pub_now, pub_caller, sig);\n    assert(proof_ok,\"certificate invalid\");\n\n    // Verify certificate Poseidon2 hash matches public input\n    let computed_hash = cert_poseidon_hash(cert);\n    assert(computed_hash == pub_hash,\"hash doesn't match certificate\");\n\n    // // Example: check age for a feature requiring 18+\n\n    let age_ok = check_age_feature(cert, min_age_feature, current_year);\n    assert(age_ok,\"user can not access this\");\n}\n","path":"/Users/dave/Work/zkbadge-starknet/circuit/src/main.nr"},"68":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/dave/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient"]}