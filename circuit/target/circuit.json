{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"14895741504957697691","abi":{"parameters":[{"name":"issuer","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"issued_at","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"valid_until","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"is_valid","type":{"kind":"boolean"},"visibility":"private"},{"name":"year_of_birth","type":{"kind":"integer","sign":"unsigned","width":16},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"hash","type":{"kind":"field"},"visibility":"public"},{"name":"min_age_feature","type":{"kind":"integer","sign":"unsigned","width":16},"visibility":"public"},{"name":"access_nullifier","type":{"kind":"field"},"visibility":"public"},{"name":"now","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"},{"name":"caller","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"current_year","type":{"kind":"integer","sign":"unsigned","width":16},"visibility":"public"}],"return_type":null,"error_types":{"1858571428594059766":{"error_kind":"string","string":"nullifier not correct"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"11199417658198303016":{"error_kind":"string","string":"hash doesn't match certificate"},"11320418456059072847":{"error_kind":"string","string":"user can not access this"}}},"bytecode":"H4sIAAAAAAAA/9Wa2VITQRSGOwsKQVTEDVwBUVzQmawTVxQVcUNABVlUKMOVz+GlF95SXvgGPofPoPc+geWNy5zQjZ3On6Rn+oQqu6qrh3/IlzNneqZzzumE2GyrYV+Rx4mwp+RIrdPQEkBLAi0FtDTQOoC2A2g7gdYJtC6gZYDWDbRdQOsB2m6g7QHaXqD1Am0f0PqAth9oB4B2EGiHgHYYaP1AGwDaEaAdBdoxoB0H2gmgnQz7uKENAm1Y+lrXTgNtFHz2LPjec0A7D7QLQBsD2kWgXQKaBzQfaFmg5YCWB1oBaEWglYAWAK0MtMtAuwK0q0C7BrTrQLsBtHGg3QTaLaBNAO020O4A7S7QJoF2D2hTYnOe6m1QjuNy9HzPqdWwPDdaopblREuaLAdaqp4Vm5ZGrJi0DsyKRdvRiBWDtrMxKzKtsxkrIq2rOSsSLdOKFYHW3ZplTdtlw7Kk9dixrGi7bVkWtD32rJa0vVFYLWi90VhNafuisprQ+qKzGtL2x2E1oB2Ix4K0g3FZgHYoPquOdtiFZdD63Vg1tAFXlkY74s7aoh3lYEnaMR5WlXacixXSTmisnFfM5yulbMXP+atetrwWFLx8Ya0Y+IFfCApvskEuVwnyQam8Vi55ZT+fq/jrhXJuXcLu89nlCa0l5Mhl54P4dhZNQcW1ac1W8sNv8S+2U8eD2vEDeaw+9zDsj8L+OOzTmq5ayvCB59b8IUbWQ8Z780S0Zw4Nmf5zjDXOCr5Y45zgizXOC75Y44LgizXGBF+scVHwxRqXBF+s4Qm+WMMXfLFGVvDFGjnR8vm0puVbs6xpBRuWJa1ox7KilWxZFrTAntWSVo7CakG7HI3VlHYlKqsJ7Wp0VkPatTisBrTr8ViQdiMuC9DG47PqaDddWAbtlhurhjbhytJot91ZW7Q7HCxJu8vDqtImuVgh7R4j65Hg+805w2dXzW9O7t/sw4ysx4z+m2X0H4qnKCZQcdOMdjyrHU+L2nhqLuxPw/4s7M9FfTyVYL43Q4z+VLYmRX1LGna7ftcgow9GBd9aBC6dja37dV6OC2pSqILVgvaFqqX/E+dHtMsz7PLnGa9xoU2TgjspNC/aswhwP7AjjHNmTmzPwud6zZwL3xSjXS8E78Kn3j3EpWLQdi4Epxl9zOSX6vMPLp2Nrft1UY5LQtQuBEuifucC90LQLufHtauyvk6m+YuM17jUpknBvRAsMt6Ldtq5LNrz8ua2cyW+nVlTQNEBLYgqCjilHS9rxyuiNjp4GfZXYX8tNneFmtGB+XL13Jp/htGfLwXvoqOufcSYA+SDlDxPu3toV47anUq7V2jXCe0WoV0etDuDdlXQbgh6V/bK+0TVfqrSU3WdquJUzaYqNFWPqepL1VqqslJ1lKqaVI08KTYrZRRRDct7OqLZSO9K8if94KUqDFVPqOpB1QqqMlB1gLL6NKnpAaTsN2WtKdtMWWLK7lJWlrKplAWl7CVlHSlbSFk+ys6prBplsSj7RFkjyvZQloayK5QVoWzGlOYzfQ7NynH008j3jrm3G9qpalRKbeLX18nPH96N6ucW5Dg9M/Z+Iz/wUT+3LMcfXZk/335+6Ve6el475dglx4x2Hu4ai9eyit/dHn51x5bZMtpxt3FOPatp8LlEg7+Txtjsf01d13rAOcXsk6Nur7qOvwXinSOSLgAA","debug_symbols":"pVfdjuogEH6XXnsBMwwD+yonJ6Zq3TRpqunqSU6M777UBVwvhhi4+mzx+zp/zMCtOwy76+d2nI+nr+7jz63bLeM0jZ/b6bTvL+NpDm9v902XHreXZRjCq+7XemCd+2WYL93HfJ2mTfevn66PP32d+/mBl34Jq2rTDfMhYBA8jtOw/rpvnmwlU8GRj2zwirIAvSpoWUGjx6igjXKSAsgKTxMce4mPMp/ART4RS3wj89HqyEfr2/jsaviGEr/O/ie/Ln6WU/y8quBblQrQAtXwXfo+a7kCdWMC3xSQM1gUeCeFbwpU5ZAh8ZmgZg+6xPeIogNccIAgChhtnwL8KuAKnQhc7kSoQJTwhVakbTJCa0dVEqiSFRrBSRJQSKXPqfRUJaAVZDeUpUYbmKqywdqmbDAq0QYquMGcBwN7MaFgW0NpG+NQEng3F6U4+GdJeZALu6BgnMkj1nPNkCadOpwmeYMXDgqoMHmByooKiKUdzrmmwGtRwjS2KaTGNoW25IRV2QkWN0YxkjkModlwTS5AJxsQrBHjUOpzzuSScsx1Ei7vb690lR/M2Q9XVZVocizRiYcXU6pKlXsEKCtLtFalaa1K016VxTjo3CJAk3wOdq1u+OapQ6p56lDrAKf2AV50472hUdwaIG6Nv+Gp34/Ly220Y7UevTYd64gQEdfLYUATkSLaiBw+EcLBbt3HAf0POhVRRwx6GMrHBT0TLHcmIq0FE9BG5IhBz6y8oEfBDq8i6oiw3vjuawiWsd9NQ7xTH6/z/tcV+/L/nFbSJfy8nPbD4boMawAeayEk3w==","file_map":{"50":{"source":"use dep::poseidon::poseidon2;\n\nstruct Certificate {\n    issuer: [u8; 32],\n    issued_at: u64,\n    valid_until: u64,\n    is_valid: bool,\n    owner: [u8; 32],\n    year_of_birth: u16,\n}\n\n// Helper to convert [u8; 32] to Field for hashing\nfn bytes32_to_field(bytes: [u8; 32]) -> Field {\n    let mut result = 0;\n    for i in 0..32 {\n        result = result * 256 + (bytes[i] as Field);\n    }\n    result\n}\n\n// Convert certificate to Field array for Poseidon2 hashing\nfn cert_to_fields(cert: Certificate) -> [Field; 6] {\n    [\n        bytes32_to_field(cert.issuer),\n        cert.issued_at as Field,\n        cert.valid_until as Field,\n        if cert.is_valid { 1 } else { 0 } as Field,\n        bytes32_to_field(cert.owner),\n        cert.year_of_birth as Field,\n    ]\n}\n\n// Hash certificate using Poseidon2\nfn cert_hash(cert: Certificate) -> Field {\n    let fields = cert_to_fields(cert);\n    poseidon2::Poseidon2::hash(fields, fields.len())\n}\n\n// Create certificate\nfn user_certificate(\n    issuer: [u8; 32],\n    issued_at: u64,\n    valid_until: u64,\n    is_valid: bool,\n    owner: [u8; 32],\n    year_of_birth: u16,\n) -> Certificate {\n    Certificate { issuer, issued_at, valid_until, is_valid, owner, year_of_birth }\n}\n\n// Verify certificate signature and freshness using Poseidon2 hash\nfn prove_cert_signed_and_fresh(cert: Certificate, now: u64, caller_pub: [u8; 32]) -> bool {\n    let _msg_hash = cert_hash(cert);\n\n    // Verify ownership\n    assert(cert.owner == caller_pub);\n    assert(cert.is_valid);\n    assert(now < cert.valid_until);\n\n    // Signature verification would use msg_hash as the message digest\n    // Poseidon2 hash is directly usable as Field element for signature verification\n\n    true\n}\n\n// Check age requirement for feature\nfn check_age_feature(cert: Certificate, feature_age: u16, current_year: u16) -> bool {\n    let age = current_year - cert.year_of_birth;\n    age >= feature_age\n}\n\n// Generate access nullifier using Poseidon2\nfn gen_access_nullifier(cert: Certificate, secret: Field) -> Field {\n    let cert_hash_field = cert_hash(cert);\n\n    let inputs = [cert_hash_field, secret];\n    poseidon2::Poseidon2::hash(inputs, inputs.len())\n}\n\n// Poseidon2 hash of certificate for public verification\nfn cert_poseidon_hash(cert: Certificate) -> Field {\n    cert_hash(cert)\n}\n\nfn main(\n    // Private witnesses\n    issuer: [u8; 32],\n    issued_at: u64,\n    valid_until: u64,\n    is_valid: bool,\n    year_of_birth: u16,\n    secret: Field,\n    // Public inputs\n    hash: pub Field,\n    min_age_feature: pub u16,\n    access_nullifier: pub Field,\n    now: pub u64,\n    caller: pub [u8; 32],\n    current_year: pub u16,\n) {\n    let cert = user_certificate(\n        issuer,\n        issued_at,\n        valid_until,\n        is_valid,\n        caller,\n        year_of_birth,\n    );\n\n    // Verify certificate freshness and ownership\n    let proof_ok = prove_cert_signed_and_fresh(cert, now, caller);\n    assert(proof_ok, \"certificate invalid\");\n\n    // Verify certificate Poseidon2 hash matches public input\n    let computed_hash = cert_poseidon_hash(cert);\n    assert(computed_hash == hash, \"hash doesn't match certificate\");\n\n    // // Example: check age for a feature requiring 18+\n\n    let age_ok = check_age_feature(cert, min_age_feature, current_year);\n    assert(age_ok, \"user can not access this\");\n\n    assert(access_nullifier == gen_access_nullifier(cert, secret), \"nullifier not correct\");\n}\n","path":"/Users/dave/Work/zkbadge-starknet/circuit/src/main.nr"},"57":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/dave/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient"]}